/**
 * css/index.css - sample-todo-app
 */

/**
 * The selector '*' matches ALL elements.
 * It is generally a bad idea to use this because it slows down your web app,
 * but for the purposes of a simple application, I think it's okay. I am using it
 * To remove all margins and padding from elements because the browser puts in padding
 * and margins by default.
 */
* {
    margin: 0;
    padding: 0;

    /**
     * The 'transition' property forces the browser to animate
     * changes in property values. For instance, if an element has a width of 100px
     * and on hover, we set the width to 150px, then the browser will animate the transition
     * of increasing width by 50px. 
     */
    -webkit-transition: .3s all ease;
    transition: .3s all ease;
}

/**
 * Another important reset is to set the html and body tags to width and height of 100%.
 * This will force them to occupy the entire space on the page instead of their default
 * "increase size as you go" philosophy. This will also allow you to create elements that
 * occupy the entire page (for instance, here I am sizing the '.full' element to the entire
 * page as well).
 */
html,
body,
.full {
    height: 100%;
    width: 100%;

    /**
     * Setting the font-family property at the body level will cause all elements created
     * to inherit the font-family of the body (unless explicitally set).
     */
    font-family: 'Helvetica', sans-serif;
}

/**
 * This is my favourite combination of properties for background images that are implemented
 * in pure CSS. The 'background-image' property is used to apply an image onto the background.
 * However, this is not nearly enough. The image will be too small for some screens and too big
 * for others. To get over this, we use 'background-size: cover;' and the browser will handle the
 * image resizing for us. Finally, based on our image and the parts of the image we wish to draw focus
 * to, we use 'background-position' with a generic position keyword (center, top, bottom, left, right)
 * to create auto-positioning of our image.
 */
body {
    background-image: url(../img/bg.jpg);
    background-size: cover;
    background-position: center center;
}

/**
 * If an element has display type 'table' AND it's child has display type 'table-cell',
 * then the child can be vertically aligned to the middle of the parent by setting the
 * 'vertical-align' property to 'middle'.
 */
.full {
    display: table;
}

/**
 * To horizontally center elements within an element, we can set 'text-align: center;' on
 * the parent.
 */
.full > .wrapper {
    display: table-cell;
    vertical-align: middle;
    text-align: center;
}

/**
 * These properties set a more attractive look than the default look of input
 * elements. They have a hideous border, background, outline, font, font-size, padding,
 * and really every other property.
 */
#inTodo {
    padding: 5px 10px;
    width: 50%;
    font-size: 1em;

    border-radius: 5px;
    border: solid 1px rgba(0,0,0,.2);
}

/**
 * The outline of input elements is a sticky mess. We can use a similar
 * look using a 'box-shadow' that works better.
 */
#inTodo:hover,
#inTodo:focus {
    outline: none;
}

/**
 * On hover, changing up the state to a more bold style will draw more focus
 * to what the user wishes to draw focus to.
 */
#inTodo:hover {
    box-shadow: 0 0 5px #3F51B5;
}

/**
 * On focus, we want to draw utmost focus to the active element. Doubling the
 * 'box-shadow' value will result in a darker box-shadow.
 */
#inTodo:focus {
    box-shadow: 0 0 5px #3F51B5, 0 0 5px #3F51B5;
}

/**
 * This is a list of resets for the 'button' element.
 * The property 'border-radius: 50%;' rounds out the element into a full circle.
 */
button {
    color: #fff;
    padding: 5px 10px;
    border: none;
    border-radius: 50%;
    background: none;
    font-size: 1em;
}

/**
 * A slight change in background draws focus to the button during
 * a hover. The 'cursor: pointer;' property will change the cursor
 * into a pointer when the mouse visits this element (this is what
 * leads the user to believe that the element is clickable).
 */
button:hover {
    background: rgba(0,0,0,.1);
    cursor: pointer;
}

/**
 * Another reset.
 * The darker background in an active/focus state will deepen the background
 * as the user moves from a hover state to a click.
 */
button:active,
button:focus {
    outline: none;
    background: rgba(0,0,0,.2);
}

/**
 * The delete button has low opacity default because deleting
 * items is not a main focus of the user's experience anyways.
 */
.delete {
    opacity: .4;
    font-size: .2em;
    padding: 2px 6px 4px;
}

/**
 * During a hover, we reach full opacity so that there is no visibility issues.
 */
.delete:hover {
    opacity: 1;
}

/**
 * The background and color properties should be set on both the element and the element's
 * hover state because the '.delete' element is also a 'button' and all 'button's have a
 * preset background and color.
 */
.delete,
.delete:hover {
    background: #f44336;
    color: #fff;
}

/**
 * This style is awfully specific so we can add some space between the todo list
 * and the controls.
 */
#list {
    padding-top: 10px;
}

/**
 * Some styles to make each todo item look nice and stand out a bit.
 */
#list > .item {
    font-size: .9em;
    padding: 10px;
    color: #fff;
    background: rgba(0,0,0,.2);
}

/**
 * Once again, we darken the background a bit on hover to draw focus.
 */
#list > .item:hover {
    background: rgba(0,0,0,.3);
}

/**
 * This is just to add some space between the todo text and the checkbox.
 */
#list > .item .checkbox {
    margin-right: 10px;
}